const mongoose = require('mongoose');

const bookSchema = new mongoose.Schema({
    book_id: { type: String, required: true, unique: true }, // AutoGenerated, in the format First Letters of the BOOK NAME
    is_free: { type: Boolean, default: false },
    name: { type: String, required: true },
    author: { type: String, required: true },
    language: { type: String, required: true },
    publisher: { type: String },
    genre: { type: String },
    description: { type: String },
    image_url: { type: String },
    audio_url: { type: String },
    ratings: { type: Number, min: 0, max: 5, default: 0 },
    available: { type: Boolean, default: true }, // Shows up for the reservation only if available
    keeper_id: { type: String }, // References either a user_id or cafe_id
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now },
});

// Pre-save hook to auto-generate book_id
bookSchema.pre('save', async function (next) {
    if (this.isNew) {
        const getFirstLetters = (str) => str.split(/\s+/).map(word => word[0]).join('').toUpperCase(); 
        const baseId = getFirstLetters(this.name);

        let count = 1;
        let book_id = `${baseId}_${count}`;

        // Ensure uniqueness
        while (await mongoose.models.Book.findOne({ book_id })) {
            count++;
            book_id = `${baseId}_${count}`;
        }

        this.book_id = book_id;
    }
    next();
});


module.exports = mongoose.model('Book', bookSchema);