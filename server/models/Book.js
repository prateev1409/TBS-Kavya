const mongoose = require('mongoose');

const bookSchema = new mongoose.Schema({
    book_id: { type: String, required: true, unique: true }, // AutoGenerated, in the format FullNameWithoutSpaces_X (e.g., HouseOfTheDragon_1)
    is_free: { type: Boolean, default: false },
    name: { type: String, required: true },
    author: { type: String, required: true },
    language: { type: String, required: true },
    publisher: { type: String },
    genre: { type: String },
    description: { type: String },
    image_url: { type: String },
    audio_url: { type: String },
    pdf_url: { type: String },
    ratings: { type: Number, min: 0, max: 5, default: 0 },
    available: { type: Boolean, default: true }, // Shows up for the reservation only if available
    keeper_id: { type: String }, // References either a user_id or cafe_id
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now },
});

// Pre-save hook to auto-generate book_id
bookSchema.pre('save', async function (next) {
    try {
        if (this.isNew) {
            // Convert book name to camelCase (e.g., "House of The Dragon" -> "HouseOfTheDragon")
            const baseId = this.name
                .split(/\s+/) // Split by whitespace
                .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()) // Capitalize first letter of each word
                .join(''); // Join without spaces

            // Find the highest existing number for this baseId
            const regex = new RegExp(`^${baseId}_\\d+$`); // Matches "HouseOfTheDragon_X" where X is a number
            const existingBooks = await mongoose.models.Book
                .find({ book_id: regex })
                .sort({ book_id: -1 }) // Sort descending to get the highest number first
                .limit(1);

            let count = 1;
            if (existingBooks.length > 0) {
                const lastBookId = existingBooks[0].book_id;
                count = parseInt(lastBookId.split('_')[1], 10) + 1; // Extract number and increment
            }

            this.book_id = `${baseId}_${count}`;
            console.log(`Generated book_id: ${this.book_id}`);
        }

        // Update updatedAt for existing documents
        if (!this.isNew) {
            this.updatedAt = Date.now();
        }

        next();
    } catch (err) {
        console.error('Error in pre-save hook:', err.message);
        next(err);
    }
});

module.exports = mongoose.model('Book', bookSchema);