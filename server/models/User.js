const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    user_id: { type: String, required: true, unique: true }, // AutoGenerated, in the format User_[string]
    name: { type: String, required: true },
    phone_number: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true }, // Will be hashed
    subscription_validity: { type: Date },
    subscription_type: { type: String, enum: ['basic', 'standard', 'premium'], default: 'basic' },
    book_id: {  type: String , default: null },
    role: { type: String, default: 'user' }, // e.g., 'user', 'admin'
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now },
});

// Single pre-save hook to handle user_id generation, password hashing, and updatedAt
userSchema.pre('save', async function (next) {
    try {
        // Auto-generate user_id for new documents
        if (this.isNew) {
            console.log('Generating user_id for new user...');
            const count = await mongoose.models.User.countDocuments();
            console.log('User count:', count);
            const userIdNumber = count + 1;
            this.user_id = `User_${String(userIdNumber).padStart(3, '0')}`; // e.g., User_001
            console.log('Generated user_id:', this.user_id);
        }

        // Hash password if modified
        if (this.isModified('password')) {
            console.log('Hashing password...');
            this.password = await bcrypt.hash(this.password, 10);
            console.log('Password hashed successfully');
        }

        // Update updatedAt for existing documents
        if (!this.isNew) {
            console.log('Updating updatedAt...');
            this.updatedAt = Date.now();
        }

        next();
    } catch (err) {
        console.error('Error in pre-save hook:', err.message);
        next(err);
    }
});

module.exports = mongoose.model('User', userSchema);